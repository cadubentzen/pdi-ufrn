## Digital Image Processing

**PAGE IN PROGRESS - DESCRIPTIONS AND IMAGES NEED TO BE ADDED YET**

This website is a showcase of small projects developed during the course of Digital Image Processing offered by Universidade Federal do Rio Grande do Norte, Department of Computer Engineering.

These exercises are based on the OpenCV tutorial provided by professor Agostinho Brito Jr (http://agostinhobritojr.github.io/tutoriais/pdi/). 

OpenCV 2.4 has been used in this material.

### Negative of a region

![Negative Region](results/result_regions.png "Negative region")

This is a typical "getting started" example to OpenCV, because it uses simple pixel manipulation in order to make a negative effect in a region of the given image.

To invert the color of a pixel, the formula used is `color = 255 - color` in each channel. To run this example: `./regions <img_path> <x1> <y1> <x2> <y2>` where x1, y1, x2 and y2 the rectangular area to be turned into negative.

#### regions.cpp
```c++
{{src/regions.cpp}}
```

### Swapping regions

This example consists of swapping the four regions of a picture, given a order passed by command line. For example, running `./swap_regions lenna.png 4 3 2 1` swaps the regions as follows, since the original sequence is `1 2 3 4` (left to right, top to bottom)

![Lenna swapped](results/result_swap.png "Lenna swapped")

#### swap\_regions.cpp
```c++
{{src/swap_regions.cpp}}
```

### Counting bubbles with holes

This example makes use of `floodFill`, which consists of painting an area that has the same color, replacing it by another color. Here this technique is used for counting and labeling bubbles in a black and white picture. Besides that, in this algorithm, bubbles with holes are counted too.

Original image                                   | 
:-----------------------------------------------:|
![Original](results/result_bubbles_original.png) |

No boundaries                                              | 
:---------------------------------------------------------:|
![No boundaries](results/result_bubbles_noboundaries.png)  |

Labeled                                         |
:----------------------------------------------:|
![Labeled](results/result_bubbles_colored.png)  |


To run the program: `./bubbles <bubbles_img>`. An example is illustrated above with an example as input. First we remove the bubbles that are in the boundaries because we can't know for sure that they have holes or not (in case this picture was taken from real objects), then we paint the bubbles and bubbles with holes are paint as blue (in RGB: 0, 0, 255).

One important aspect of the algorith below is that it runs on a BGR image, not greyscale. This is done to overcome the problem of having a limit of 255 bubbles on counting if the same thing was done in greyscale. In this implementation I allowed from BGR = (0,0,1) up until BGR = (50,255,255) for labeling. This way it is possible to count up to 3276799 bubbles. The blue channel was limited to 50 for allowing bubbles with holes to be painted full blue BGR = (255,0,0) and be distinguished from the others.

#### bubbles.cpp
```c++
{{src/bubbles.cpp}}
```

### Histogram equalization

```c++
{{src/equalize.cpp}}
```

### Motion detection

```c++
{{src/motiondetector.cpp}}
```

### Laplacian of Gaussian

```c++
{{src/laplgauss.cpp}}
```

### Tilt Shift

```c++
{{src/tiltshift.cpp}}
```

### Video using Tilt Shift

```c++
{{src/tiltshiftvideo.cpp}}
```
